#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
from enum import Enum


HELP = """Convert a suite name to a list of domains.

A suite named "*-strips" means that the output file generated by the
Fast Downward translator is SAS+ plus action costs, while the "adl"
suffix means that it may also contain conditional effects and/or axioms.
These names are not ideal for distinguishing the domains, but they are
the way they are for historical reasons.

For some domains, there are several formulations. Suites with "ipc" in
their names (and their combinations) only contain one formulation of
every domain. If there are other formulations, they are in separate
suites which are not part of the regular IPC suites. They are only part
of special suites such as "suite_alternative_formulations" and
"suite_all"."""

_PREFIX = "suite_"


def suite_alternative_formulations():
    return ['airport-adl', 'no-mprime', 'no-mystery']


def suite_ipc98_to_ipc04_adl():
    return [
        'assembly', 'miconic-fulladl', 'miconic-simpleadl',
        'optical-telegraphs', 'philosophers', 'psr-large',
        'psr-middle', 'schedule',
    ]


def suite_ipc98_to_ipc04_strips():
    return [
        'airport', 'blocks', 'depot', 'driverlog', 'freecell', 'grid',
        'gripper', 'logistics00', 'logistics98', 'miconic', 'movie',
        'mprime', 'mystery', 'pipesworld-notankage', 'psr-small',
        'satellite', 'zenotravel',
    ]


def suite_ipc98_to_ipc04():
    # All IPC1-4 domains, including the trivial Movie.
    return sorted(suite_ipc98_to_ipc04_adl() + suite_ipc98_to_ipc04_strips())


def suite_ipc06_adl():
    return [
        'openstacks',
        'pathways',
        'trucks',
    ]


def suite_ipc06_strips_compilations():
    return [
        'openstacks-strips',
        'pathways-noneg',
        'trucks-strips',
    ]


def suite_ipc06_strips():
    return [
        'pipesworld-tankage',
        'rovers',
        'storage',
        'tpp',
    ]


def suite_ipc06():
    return sorted(suite_ipc06_adl() + suite_ipc06_strips())


def suite_ipc08_common_strips():
    return [
        'parcprinter-08-strips',
        'pegsol-08-strips',
        'scanalyzer-08-strips',
    ]


def suite_ipc08_opt_adl():
    return ['openstacks-opt08-adl']


def suite_ipc08_opt_strips():
    return sorted(suite_ipc08_common_strips() + [
        'elevators-opt08-strips',
        'openstacks-opt08-strips',
        'sokoban-opt08-strips',
        'transport-opt08-strips',
        'woodworking-opt08-strips',
    ])


def suite_ipc08_opt():
    return sorted(suite_ipc08_opt_strips() + suite_ipc08_opt_adl())


def suite_ipc08_sat_adl():
    return ['openstacks-sat08-adl']


def suite_ipc08_sat_strips():
    return sorted(suite_ipc08_common_strips() + [
        # Note: cyber-security is missing.
        'elevators-sat08-strips',
        'openstacks-sat08-strips',
        'sokoban-sat08-strips',
        'transport-sat08-strips',
        'woodworking-sat08-strips',
    ])


def suite_ipc08_sat():
    return sorted(suite_ipc08_sat_strips() + suite_ipc08_sat_adl())


def suite_ipc08():
    return sorted(set(suite_ipc08_opt() + suite_ipc08_sat()))


def suite_ipc11_opt():
    return [
        'barman-opt11-strips',
        'elevators-opt11-strips',
        'floortile-opt11-strips',
        'nomystery-opt11-strips',
        'openstacks-opt11-strips',
        'parcprinter-opt11-strips',
        'parking-opt11-strips',
        'pegsol-opt11-strips',
        'scanalyzer-opt11-strips',
        'sokoban-opt11-strips',
        'tidybot-opt11-strips',
        'transport-opt11-strips',
        'visitall-opt11-strips',
        'woodworking-opt11-strips',
    ]


def suite_ipc11_sat():
    return [
        'barman-sat11-strips',
        'elevators-sat11-strips',
        'floortile-sat11-strips',
        'nomystery-sat11-strips',
        'openstacks-sat11-strips',
        'parcprinter-sat11-strips',
        'parking-sat11-strips',
        'pegsol-sat11-strips',
        'scanalyzer-sat11-strips',
        'sokoban-sat11-strips',
        'tidybot-sat11-strips',
        'transport-sat11-strips',
        'visitall-sat11-strips',
        'woodworking-sat11-strips',
    ]


def suite_ipc11():
    return sorted(suite_ipc11_opt() + suite_ipc11_sat())


def suite_ipc14_agl_adl():
    return [
        'cavediving-14-adl',
        'citycar-sat14-adl',
        'maintenance-sat14-adl',
    ]


def suite_ipc14_agl_strips():
    return [
        'barman-sat14-strips',
        'childsnack-sat14-strips',
        'floortile-sat14-strips',
        'ged-sat14-strips',
        'hiking-agl14-strips',
        'openstacks-agl14-strips',
        'parking-sat14-strips',
        'tetris-sat14-strips',
        'thoughtful-sat14-strips',
        'transport-sat14-strips',
        'visitall-sat14-strips',
    ]


def suite_ipc14_agl():
    return sorted(suite_ipc14_agl_adl() + suite_ipc14_agl_strips())


def suite_ipc14_mco_adl():
    return [
        'cavediving-14-adl',
        'citycar-sat14-adl',
        'maintenance-sat14-adl',
    ]


def suite_ipc14_mco_strips():
    return [
        'barman-mco14-strips',
        'childsnack-sat14-strips',
        'floortile-sat14-strips',
        'ged-sat14-strips',
        'hiking-sat14-strips',
        'openstacks-sat14-strips',
        'parking-sat14-strips',
        'tetris-sat14-strips',
        'thoughtful-mco14-strips',
        'transport-sat14-strips',
        'visitall-sat14-strips',
    ]


def suite_ipc14_mco():
    return sorted(suite_ipc14_mco_adl() + suite_ipc14_mco_strips())


def suite_ipc14_opt_adl():
    return [
        'cavediving-14-adl',
        'citycar-opt14-adl',
        'maintenance-opt14-adl',
    ]


def suite_ipc14_opt_strips():
    return [
        'barman-opt14-strips',
        'childsnack-opt14-strips',
        'floortile-opt14-strips',
        'ged-opt14-strips',
        'hiking-opt14-strips',
        'openstacks-opt14-strips',
        'parking-opt14-strips',
        'tetris-opt14-strips',
        'tidybot-opt14-strips',
        'transport-opt14-strips',
        'visitall-opt14-strips',
    ]


def suite_ipc14_opt():
    return sorted(suite_ipc14_opt_adl() + suite_ipc14_opt_strips())


def suite_ipc14_sat_adl():
    return [
        'cavediving-14-adl',
        'citycar-sat14-adl',
        'maintenance-sat14-adl',
    ]


def suite_ipc14_sat_strips():
    return [
        'barman-sat14-strips',
        'childsnack-sat14-strips',
        'floortile-sat14-strips',
        'ged-sat14-strips',
        'hiking-sat14-strips',
        'openstacks-sat14-strips',
        'parking-sat14-strips',
        'tetris-sat14-strips',
        'thoughtful-sat14-strips',
        'transport-sat14-strips',
        'visitall-sat14-strips',
    ]


def suite_ipc14_sat():
    return sorted(suite_ipc14_sat_adl() + suite_ipc14_sat_strips())


def suite_ipc14():
    return sorted(set(
        suite_ipc14_agl() + suite_ipc14_mco() +
        suite_ipc14_opt() + suite_ipc14_sat()))


def suite_ipc18_opt_adl():
    return [
        'caldera-opt18-adl',
        'caldera-split-opt18-adl',
        'nurikabe-opt18-adl',
        'settlers-opt18-adl',
    ]


def suite_ipc18_opt_strips():
    return [
        'agricola-opt18-strips',
        'data-network-opt18-strips',  # Conditional effects are removed by the translator.
        'organic-synthesis-opt18-strips',
        'organic-synthesis-split-opt18-strips',  # Conditional effects are removed by the translator.
        'petri-net-alignment-opt18-strips',
        'snake-opt18-strips',
        'spider-opt18-strips',
        'termes-opt18-strips',
    ]


def suite_ipc18_opt():
    return sorted(suite_ipc18_opt_adl() + suite_ipc18_opt_strips())


def suite_ipc18_sat_adl():
    return [
        'caldera-sat18-adl',
        'caldera-split-sat18-adl',
        'flashfill-sat18-adl',
        'nurikabe-sat18-adl',
        'settlers-sat18-adl',
    ]


def suite_ipc18_sat_strips():
    return [
        'agricola-sat18-strips',
        'data-network-sat18-strips',  # Conditional effects are removed by the translator.
        'organic-synthesis-sat18-strips',
        'organic-synthesis-split-sat18-strips',  # Conditional effects are removed by the translator.
        'snake-sat18-strips',
        'spider-sat18-strips',
        'termes-sat18-strips',
    ]


def suite_ipc18_sat():
    return sorted(suite_ipc18_sat_adl() + suite_ipc18_sat_strips())


def suite_ipc18():
    return sorted(set(
        suite_ipc18_opt() + suite_ipc18_sat()))


def suite_unsolvable():
    return sorted(
        ['mystery:prob%02d.pddl' % index
         for index in [4, 5, 7, 8, 12, 16, 18, 21, 22, 23, 24]] +
        ['miconic-fulladl:f21-3.pddl', 'miconic-fulladl:f30-2.pddl'])


def suite_optimal_adl():
    return sorted(
        suite_ipc98_to_ipc04_adl() + suite_ipc06_adl() +
        suite_ipc08_opt_adl() + suite_ipc14_opt_adl() +
        suite_ipc18_opt_adl())


def suite_optimal_strips():
    return sorted(
        suite_ipc98_to_ipc04_strips() + suite_ipc06_strips() +
        suite_ipc06_strips_compilations() + suite_ipc08_opt_strips() +
        suite_ipc11_opt() + suite_ipc14_opt_strips() +
        suite_ipc18_opt_strips())


def suite_optimal():
    return sorted(suite_optimal_adl() + suite_optimal_strips())


def suite_satisficing_adl():
    return sorted(
        suite_ipc98_to_ipc04_adl() + suite_ipc06_adl() +
        suite_ipc08_sat_adl() + suite_ipc14_sat_adl() +
        suite_ipc18_sat_adl())


def suite_satisficing_strips():
    return sorted(
        suite_ipc98_to_ipc04_strips() + suite_ipc06_strips() +
        suite_ipc06_strips_compilations() + suite_ipc08_sat_strips() +
        suite_ipc11_sat() + suite_ipc14_sat_strips() +
        suite_ipc18_sat_strips())


def suite_satisficing():
    return sorted(suite_satisficing_adl() + suite_satisficing_strips())


def suite_all():
    return sorted(
        suite_ipc98_to_ipc04() + suite_ipc06() +
        suite_ipc06_strips_compilations() + suite_ipc08() +
        suite_ipc11() + suite_ipc14() + suite_ipc18() +
        suite_alternative_formulations())


class CostType(Enum):
    UNIT = 1
    ZERO = 2
    NONUNIT_NONZERO = 3


domain_to_cost_type = {
    'agricola-opt18-strips': CostType.NONUNIT_NONZERO,
    'agricola-sat18-strips': CostType.NONUNIT_NONZERO,
    'airport': CostType.UNIT,
    'airport-adl': CostType.UNIT,
    'assembly': CostType.UNIT,
    'barman-mco14-strips': CostType.UNIT,
    'barman-opt11-strips': CostType.NONUNIT_NONZERO,
    'barman-opt14-strips': CostType.UNIT,
    'barman-sat11-strips': CostType.NONUNIT_NONZERO,
    'barman-sat14-strips': CostType.UNIT,
    'blocks': CostType.UNIT,
    'caldera-opt18-adl': CostType.UNIT,
    'caldera-sat18-adl': CostType.UNIT,
    'caldera-split-opt18-adl': CostType.NONUNIT_NONZERO,
    'caldera-split-sat18-adl': CostType.NONUNIT_NONZERO,
    'cavediving-14-adl': CostType.NONUNIT_NONZERO,
    'childsnack-opt14-strips': CostType.UNIT,
    'childsnack-sat14-strips': CostType.UNIT,
    'citycar-opt14-adl': CostType.NONUNIT_NONZERO,
    'citycar-sat14-adl': CostType.NONUNIT_NONZERO,
    'data-network-opt18-strips': CostType.ZERO,
    'data-network-sat18-strips': CostType.ZERO,
    'depot': CostType.UNIT,
    'driverlog': CostType.UNIT,
    'elevators-opt08-strips': CostType.ZERO,
    'elevators-opt11-strips': CostType.ZERO,
    'elevators-sat08-strips': CostType.ZERO,
    'elevators-sat11-strips': CostType.ZERO,
    'flashfill-sat18-adl': CostType.ZERO,
    'floortile-opt11-strips': CostType.NONUNIT_NONZERO,
    'floortile-opt14-strips': CostType.NONUNIT_NONZERO,
    'floortile-sat11-strips': CostType.NONUNIT_NONZERO,
    'floortile-sat14-strips': CostType.NONUNIT_NONZERO,
    'freecell': CostType.UNIT,
    'ged-opt14-strips': CostType.ZERO,
    'ged-sat14-strips': CostType.ZERO,
    'grid': CostType.UNIT,
    'gripper': CostType.UNIT,
    'hiking-agl14-strips': CostType.UNIT,
    'hiking-opt14-strips': CostType.UNIT,
    'hiking-sat14-strips': CostType.UNIT,
    'logistics00': CostType.UNIT,
    'logistics98': CostType.UNIT,
    'maintenance-opt14-adl': CostType.UNIT,
    'maintenance-sat14-adl': CostType.UNIT,
    'miconic': CostType.UNIT,
    'miconic-fulladl': CostType.UNIT,
    'miconic-simpleadl': CostType.UNIT,
    'movie': CostType.UNIT,
    'mprime': CostType.UNIT,
    'mystery': CostType.UNIT,
    'no-mprime': CostType.UNIT,
    'no-mystery': CostType.UNIT,
    'nomystery-opt11-strips': CostType.UNIT,
    'nomystery-sat11-strips': CostType.UNIT,
    'nurikabe-opt18-adl': CostType.UNIT,
    'nurikabe-sat18-adl': CostType.UNIT,
    'openstacks': CostType.UNIT,
    'openstacks-agl14-strips': CostType.ZERO,
    'openstacks-opt08-adl': CostType.ZERO,
    'openstacks-opt08-strips': CostType.ZERO,
    'openstacks-opt11-strips': CostType.ZERO,
    'openstacks-opt14-strips': CostType.ZERO,
    'openstacks-sat08-adl': CostType.ZERO,
    'openstacks-sat08-strips': CostType.ZERO,
    'openstacks-sat11-strips': CostType.ZERO,
    'openstacks-sat14-strips': CostType.ZERO,
    'openstacks-strips': CostType.UNIT,
    'optical-telegraphs': CostType.UNIT,
    'organic-synthesis-opt18-strips': CostType.UNIT,
    'organic-synthesis-sat18-strips': CostType.UNIT,
    'organic-synthesis-split-opt18-strips': CostType.NONUNIT_NONZERO,
    'organic-synthesis-split-sat18-strips': CostType.NONUNIT_NONZERO,
    'parcprinter-08-strips': CostType.ZERO,
    'parcprinter-opt11-strips': CostType.ZERO,
    'parcprinter-sat11-strips': CostType.ZERO,
    'parking-opt11-strips': CostType.UNIT,
    'parking-opt14-strips': CostType.UNIT,
    'parking-sat11-strips': CostType.UNIT,
    'parking-sat14-strips': CostType.UNIT,
    'pathways': CostType.UNIT,
    'pathways-noneg': CostType.UNIT,
    'pegsol-08-strips': CostType.ZERO,
    'pegsol-opt11-strips': CostType.ZERO,
    'pegsol-sat11-strips': CostType.ZERO,
    'petri-net-alignment-opt18-strips': CostType.ZERO,
    'philosophers': CostType.UNIT,
    'pipesworld-notankage': CostType.UNIT,
    'pipesworld-tankage': CostType.UNIT,
    'psr-large': CostType.UNIT,
    'psr-middle': CostType.UNIT,
    'psr-small': CostType.UNIT,
    'rovers': CostType.UNIT,
    'satellite': CostType.UNIT,
    'scanalyzer-08-strips': CostType.NONUNIT_NONZERO,
    'scanalyzer-opt11-strips': CostType.NONUNIT_NONZERO,
    'scanalyzer-sat11-strips': CostType.NONUNIT_NONZERO,
    'schedule': CostType.UNIT,
    'settlers-opt18-adl': CostType.ZERO,
    'settlers-sat18-adl': CostType.ZERO,
    'snake-opt18-strips': CostType.UNIT,
    'snake-sat18-strips': CostType.UNIT,
    'sokoban-opt08-strips': CostType.ZERO,
    'sokoban-opt11-strips': CostType.ZERO,
    'sokoban-sat08-strips': CostType.ZERO,
    'sokoban-sat11-strips': CostType.ZERO,
    'spider-opt18-strips': CostType.ZERO,
    'spider-sat18-strips': CostType.ZERO,
    'storage': CostType.UNIT,
    'termes-opt18-strips': CostType.UNIT,
    'termes-sat18-strips': CostType.UNIT,
    'tetris-opt14-strips': CostType.NONUNIT_NONZERO,
    'tetris-sat14-strips': CostType.NONUNIT_NONZERO,
    'thoughtful-mco14-strips': CostType.UNIT,
    'thoughtful-sat14-strips': CostType.UNIT,
    'tidybot-opt11-strips': CostType.UNIT,
    'tidybot-opt14-strips': CostType.UNIT,
    'tidybot-sat11-strips': CostType.UNIT,
    'tpp': CostType.UNIT,
    'transport-opt08-strips': CostType.NONUNIT_NONZERO,
    'transport-opt11-strips': CostType.NONUNIT_NONZERO,
    'transport-opt14-strips': CostType.NONUNIT_NONZERO,
    'transport-sat08-strips': CostType.NONUNIT_NONZERO,
    'transport-sat11-strips': CostType.NONUNIT_NONZERO,
    'transport-sat14-strips': CostType.NONUNIT_NONZERO,
    'trucks': CostType.UNIT,
    'trucks-strips': CostType.UNIT,
    'visitall-opt11-strips': CostType.UNIT,
    'visitall-opt14-strips': CostType.UNIT,
    'visitall-sat11-strips': CostType.UNIT,
    'visitall-sat14-strips': CostType.UNIT,
    'woodworking-opt08-strips': CostType.NONUNIT_NONZERO,
    'woodworking-opt11-strips': CostType.NONUNIT_NONZERO,
    'woodworking-sat08-strips': CostType.NONUNIT_NONZERO,
    'woodworking-sat11-strips': CostType.NONUNIT_NONZERO,
    'zenotravel': CostType.UNIT,
}


def filter_suite(suite, cost_type):
    result = []
    for domain in suite:
        if domain not in domain_to_cost_type:
            print("Could not find cost type of domain {}".format(domain))
            exit(1)
        if domain_to_cost_type[domain] == cost_type:
            result.append(domain)
    return result

def get_suite_names():
    return [
        name[len(_PREFIX):] for name in sorted(globals().keys())
        if name.startswith(_PREFIX)]


def get_suite(name):
    suite_func = globals()[_PREFIX + name]
    return suite_func()


def _parse_args():
    parser = argparse.ArgumentParser(description=HELP)
    parser.add_argument("suite", choices=get_suite_names(), help="suite name")
    parser.add_argument("--cost-type", choices=[val.name.lower() for val in CostType],
        help="filter the chosen suite according to operator costs")
    return parser.parse_args()


def main():
    args = _parse_args()
    suite = get_suite(args.suite)
    if args.cost_type:
        cost_type = CostType[args.cost_type.upper()]
        suite = filter_suite(suite, cost_type)
    print(suite)


if __name__ == "__main__":
    main()
